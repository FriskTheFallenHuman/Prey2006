
void main(
	float4 position : POSITION ,
	float4 texCoord : ATTR8,
	float3 normal : ATTR9,
	float3 tangent0 : ATTR10,
	float3 tangent1 : ATTR11,
	//float4 color : ATTR5, //bugged?
	float4 color : COLOR0,
	uniform float4 lightOrigin : ENV4,
	uniform float4 viewOrigin : ENV5,
	uniform float4 lightProjectS : ENV6,
	uniform float4 lightProjectT : ENV7,
	uniform float4 lightProjectQ : ENV8,
	uniform float4 lightFalloffS : ENV9,
	uniform float4 bumpMatrixS : ENV10,
	uniform float4 bumpMatrixT : ENV11,
	uniform float4 diffuseMatrixS : ENV12,
	uniform float4 diffuseMatrixT : ENV13,
	uniform float4 specularMatrixS : ENV14,
	uniform float4 specularMatrixT : ENV15,
	uniform float4 colorModulate : ENV16,
	uniform float4 colorAdd : ENV17,
	out float3 lightVector   : TEXCOORD0,
	out float2 bumpST	    : TEXCOORD1,
	out float2 lightFalloff  : TEXCOORD2,
	out float3 lightProjection : TEXCOORD3,
	out float2 diffuseST       : TEXCOORD4,
	out float2 specularST      : TEXCOORD5,
	out float3 halfAngleVector : TEXCOORD6,
	out float3 cameraVector : TEXCOORD7,
	out float4 primaryColor    : COL0,
	out float4 hpos            : POSITION )
{
  // normal map texgen
  bumpST = mul( float2x4( bumpMatrixS, bumpMatrixT ), texCoord );

  // light falloff texgen
  lightFalloff.x = dot( lightFalloffS, position );
  lightFalloff.y = 0.5;
  
  // light projection texgen
  lightProjection = mul( float3x4( lightProjectS, lightProjectT, lightProjectQ ), position );

  // diffuse map texgen
  diffuseST = mul( float2x4( diffuseMatrixS, diffuseMatrixT ), texCoord );

  // specular map texgen
  specularST = mul( float2x4( specularMatrixS, specularMatrixT ), texCoord );

  // light and halfangle vectors
  float3x3 TBN = float3x3( tangent0, tangent1, normal );
  
  float3 L = lightOrigin.xyz - position.xyz;
  float3 V = viewOrigin.xyz - position.xyz;
  float3 H = normalize(L) + normalize(V);

  lightVector =     mul( TBN, L );
  halfAngleVector = mul( TBN, H );
  cameraVector = mul(TBN, V);


  // primary color
  primaryColor = color * colorModulate + colorAdd;

  // position
  hpos = mul(glstate.matrix.mvp, position); 
}
