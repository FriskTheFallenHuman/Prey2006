// lights.mtr
//
// Proposed standardized parm usage:
//	parm0,1,2	RGB color values
//	parm3	phase offset
// 	parm4	time offset for synchronizing?
//	parm5	min light level ( 0 - 1 )
//	parm6	pulse speed, frequency, rotation rate
//	parm7	broken state (0==broken?)
//	parm8	color/size scalar

//HUMANHEAD rww - this material needs to exist, it is the default referenced by lights without a shader specified.
//if it does not exist, it may or may not be eventually defaulted by a decl system load, which will produce inconsistent
//behaviour (particularly with shadowcasting).
lights/squarelight1
{
	{
		forceHighQuality
		map	lights/squarelight1
		colored
		zeroclamp
	}
}

// Standard lights
lights/defaultPointLight
{
	lightFalloffImage	makeintensity( lights/squarelight1a )	// this will also be the falloff for any
																	// point light shaders that don't specify one
	{
		forceHighQuality
		map lights/squarelight1
		colored
		zeroclamp
	}
}

lights/squarelight1sky
{
	lightFalloffImage	makeintensity( lights/squarelight1b )
	{
		forceHighQuality
		map	lights/squarelight1
		colored
		zeroclamp
	}
}



lights/defaultPointLightX2
{
	lightFalloffImage	makeintensity( lights/squarelight1a )
	{
		forceHighQuality
		map	lights/squarelight1
		color 2 * parm0, 2 * parm1, 2 * parm2, 1.0
		zeroClamp
	}
}

lights/defaultPointLightX4
{
	lightFalloffImage	makeintensity( lights/squarelight1a )
	{
		forceHighQuality
		map	lights/squarelight1
		color 4 * parm0, 4 * parm1, 4 * parm2, 1.0
		zeroClamp
	}
}

lights/defaultProjectedLight
{
	lightFalloffImage	_noFalloff		// by default, stay bright almost all the way to the end
	{
		forceHighQuality
		map lights/squarelight1
		colored
		zeroClamp
	}
}

lights/circleLight4_falloff
{
	lightFalloffImage	makeintensity( lights/falloff_curve2 )
	{
		forceHighQuality
		map lights/circlelight4
		colored
		zeroClamp
	}
}

lights/circleLight4_falloff_flicker
{
	lightFalloffImage	makeintensity( lights/falloff_curve2 )
	{
		forceHighQuality
		map lights/circlelight4
		color parm0 * flicker5light[ time * 7 ],
			  parm1 * flicker5light[ time * 7 ],
			  parm2 * flicker5light[ time * 7 ],
			  1.0
		zeroClamp
	}
}

lights/defaultProjectedLightX2
{
	lightFalloffImage	_noFalloff
	{
		forceHighQuality
		map	lights/squarelight1
		color 2 * parm0, 2 * parm1, 2 * parm2, 1.0
		zeroClamp
	}
}

lights/defaultProjectedLightX4
{
	lightFalloffImage	_noFalloff
	{
		forceHighQuality
		map	lights/squarelight1
		color 4 * parm0, 4 * parm1, 4 * parm2, 1.0
		zeroClamp
	}
}

// an ambient light will do non-directional bump mapping, and won't have specular lighting
// or shadows
lights/ambientLight
{
	ambientLight
	lightFalloffImage	makeintensity( lights/squarelight1a )
	{
		forceHighQuality
		map lights/squarelight1
		colored
		zeroClamp
	}
}

// an ambient light will do non-directional bump mapping, and won't have specular lighting
// or shadows
lights/ambientLightCircle
{
	ambientLight
	lightFalloffImage	makeintensity( lights/squarelight1a )
	{
		forceHighQuality
		map lights/circlelight10
		colored
		zeroClamp
	}
}

lights/ambientLight_lota
{
	ambientLight
	lightFalloffImage	_noFalloff
	{
		forceHighQuality
		map lights/ambient_lota
		scale -1,1
		//scroll 1,0
		colored
		//zeroClamp
	}
}

lights/amb_lota_a
{
	ambientLight
	lightFalloffImage	_noFalloff
	{
		forceHighQuality
		map lights/amb_lota_a
		scale -1,1
		//scroll 1,0
		colored
		//zeroClamp
	}
}

lights/amb_lota_b
{
	ambientLight
	lightFalloffImage	_noFalloff
	{
		forceHighQuality
		map lights/amb_lota_b
		scale -1,1
		//scroll 1,0
		colored
		//zeroClamp
	}
}

lights/amb_lota_c
{
	ambientLight
	lightFalloffImage	_noFalloff
	{
		forceHighQuality
		map lights/amb_lota_c
		scale -1,1
		//scroll 1,0
		colored
		//zeroClamp
	}
}

lights/amb_lota_d1
{
	ambientLight
	lightFalloffImage	_noFalloff
	{
		forceHighQuality
		map lights/amb_lota_d1
		scale -1,1
		//scroll 1,0
		colored
		//zeroClamp
	}
}

lights/amb_lota_d2
{
	ambientLight
	lightFalloffImage	_noFalloff
	{
		forceHighQuality
		map lights/amb_lota_d2
		scale -1,1
		//scroll 1,0
		colored
		//zeroClamp
	}
}

lights/amb_lotacave
{
	ambientLight
	lightFalloffImage	makeintensity( lights/amb_lotacavefalloff )
	{
		forceHighQuality
		map lights/amb_lotacave
		scale -1,1
		//scroll 1,0
		colored
		//zeroClamp
	}
}

lights/ambientLight_lota_Invaded
{
	ambientLight
	lightFalloffImage	_noFalloff
	{
		forceHighQuality
		map lights/ambient_lota_Invaded
		scale -1,1
		//scroll 1,0
		colored
		//zeroClamp
	}
}

lights/lotafullwhite
{
	lightFalloffImage	_noFalloff		// by default, stay bright almost all the way to the end
	{
		forceHighQuality
		map lights/lotafullwhite
		colored
		zeroClamp
	}
}

lights/lotafullwhitemoon
{
	lightFalloffImage	_noFalloff		// by default, stay bright almost all the way to the end
	{
		forceHighQuality
		map lights/lotafullwhitemoon
		colored
		zeroClamp
	}
}

lights/lotafullwhitemoon2
{
	lightFalloffImage	_noFalloff		// by default, stay bright almost all the way to the end
	{
		forceHighQuality
		map lights/lotafullwhitemoon2
		colored
		zeroClamp
	}
}

lights/lotacmainlight
{
	lightFalloffImage	_noFalloff		// by default, stay bright almost all the way to the end
	{
		forceHighQuality
		map lights/lotacmainlight
		colored
		zeroClamp
	}
}

lights/lota_ped
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		map lights/lota_ped
		zeroclamp
	}
}

lights/kf/room1light
{
	lightFalloffImage _noFalloff
	{
		forcehighquality
		map lights/kfroom1light
		scale 1,-1
		colored
		//zeroclamp
	}
}

lights/kf/room1lightamb
{
	lightFalloffImage	_noFalloff		// by default, stay bright almost all the way to the end
	{
		forceHighQuality
		map lights/kfroom1lightamb
		colored
		zeroClamp
	}
}

// temp explosion light
lights/explosion
{
	{
		forceHighQuality
		map lights/explosion
		colored
		zeroClamp
	}
}

lights/defaultProjectedLight_pulse
{
	{
		forceHighQuality
		map	lights/defaultpointlight
		zeroClamp
		color		parm0 * (.2 * sintable [.15 + time * .5 ] + .7),
				parm1 * (.2 * sintable [.15 + time * .5 ] + .7),
				parm2 * (.2 * sintable [.15 + time * .5 ] + .7),
				1.0
	}
}

lights/sorelight1mask_project
{

	{
		forceHighQuality
		map		textures/organics/sorelight1mask_project1
		zeroclamp
		rotate		time * - 0.1
		color	0, .5, .5, 0
//		centerscale	scale_1jitter[ time * 0.08 ], scale_1jitter[ time * 0.10 ]
		rgb (alpha [time * .5])
		red (alpha [time * .3])
	}
	{
		forceHighQuality
		map		textures/organics/sorelight1mask_project1
		zeroclamp
		rotate		time *  0.05
		centerscale 1.3, 1.3
		color	0, .5, .5, 0
		rgb (alpha [time * .7])
		red (alpha [time * .8])
	}
	{
		forceHighQuality
		map		textures/organics/sorelight1mask_project2
//		colored
		zeroclamp
		rotate	time * .2
		color	1,0,0,0
		rgb (alpha [time * 1])
		red (alpha [time * .3])
	}
}



lights/harvesters/caustic1
{
	{
		forceHighQuality
		map			lights/caustic1
		zeroClamp
		rotate		time * -0.035
		color		parm0 * ramp_2saw[ time * 0.12 ],
					parm1 * ramp_2saw[ time * 0.12 ],
					parm2 * ramp_2saw[ time * 0.12 ],
					1.0
		centerscale	scale_1jitter[ time * 0.08 ], scale_1jitter[ time * 0.10 ]
	}
	{
		forceHighQuality
		map			lights/caustic1
		zeroClamp
		rotate		time * 0.025
		color		parm0 * ramp_2invsaw[ time * 0.12 ],
					parm1 * ramp_2invsaw[ time * 0.12 ],
					parm2 * ramp_2invsaw[ time * 0.12 ],
					1.0
		centerscale	scale_1jitter[ time * 0.09 ], scale_1jitter[ time * 0.11 ]
	}
}

lights/harvesters/caustic2
{
	{
		forceHighQuality
		map			lights/caustic2
		zeroClamp
		rotate		time * -0.035
		color		parm0 * ramp_2saw[ time * 0.12 ],
					parm1 * ramp_2saw[ time * 0.12 ],
					parm2 * ramp_2saw[ time * 0.12 ],
					1.0
		centerscale	scale_1jitter[ time * 0.08 ], scale_1jitter[ time * 0.10 ]
	}
	{
		forceHighQuality
		map			lights/caustic2
		zeroClamp
		rotate		time * 0.025
		color		parm0 * ramp_2invsaw[ time * 0.12 ],
					parm1 * ramp_2invsaw[ time * 0.12 ],
					parm2 * ramp_2invsaw[ time * 0.12 ],
					1.0
		centerscale	scale_1jitter[ time * 0.09 ], scale_1jitter[ time * 0.11 ]
	}
}


lights/guts/veinlight1
{
	{
		forceHighQuality
		map			lights/vein1
		colored
		zeroClamp
	}
}


lights/guts/linlight0
{
	{
		forceHighQuality
		map			lights/lin0
		colored
		scroll		0, time * 0.0103
	}
	{
		forceHighQuality
		map			lights/lin0
		colored
		scroll		0, time * 0.0213
	}
	{
		forceHighQuality
		map			lights/lin0
		colored
		scroll		0, time * 0.0463
	}
}



lights/sound/soundPointLightParm3
{
	{
		forceHighQuality
		map			lights/defaultpointlight
		red 		( ( 1 - sound ) * Parm0 ) * Parm3
		green 		( ( 1 - sound ) * Parm1 ) * Parm3
		blue 		( ( 1 - sound ) * Parm2 ) * Parm3
		zeroClamp
	}
}

lights/sound/soundSquareLightParm3
{
	{
		forceHighQuality
		map			lights/squarelight1
		red 		( ( 1 - sound ) * Parm0 ) * Parm3
		green 		( ( 1 - sound ) * Parm1 ) * Parm3
		blue 		( ( 1 - sound ) * Parm2 ) * Parm3
		zeroClamp
	}
}

lights/sound/soundSquareLightParm3_2
{
	{ if ( parm7 == 0 )
		forceHighQuality
		map			lights/squarelight1
		red 		( sound * Parm3 ) * Parm0
		green 		( sound * Parm3 ) * Parm1
		blue 		( sound * Parm3 ) * Parm2
		zeroClamp
	}
	{ if ( parm7 == 1 )
		forceHighQuality
		map			lights/squarelight1
		red		( parm0 * 0.9 ) + ( parm0 * 0.1 * sound )
		green	( parm1 * 0.9 ) + ( parm1 * 0.1 * sound )
		blue	( parm2 * 0.9 ) + ( parm2 * 0.1 * sound )
		zeroClamp
	}
}

// Parm3 - phase offset
// Parm4 - pulse speed
// Parm5 - min light level ( 0 - 1 )



lights/feedingtower/tri_spot2_parm4rotate
{
	{
		forceHighQuality
		map	lights/ftower_light_spot2
		colored
		rotate	time * parm4
		zeroClamp
	}
}

lights/feedingtower/tri_spot3
{
	{
		forceHighQuality
		map	lights/ftower_light_spot3
		colored
		zeroClamp
	}
}


lights/gridlightsquare
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/gridlightsquare
		colored
		zeroClamp
	}
}

lights/gridlightflckr
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/gridlightsquare
		color		parm0 * 4.0 * ( flicker_elec2[ time * 0.75 ]),
					parm1 * 4.0 * ( flicker_elec2[ time * 0.75 ]),
					parm2 * 4.0 * ( flicker_elec2[ time * 0.75 ]),
					1.0
		zeroClamp
	}
}

lights/gridlightflckr_sound
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/gridlightsquare

		red		( ( parm0 * 0.2 ) + ( parm0 * 0.7 * sound ) ) * parm5
		green	( ( parm1 * 0.2 ) + ( parm1 * 0.7 * sound ) ) * parm5
		blue	( ( parm2 * 0.2 ) + ( parm2 * 0.7 * sound ) ) * parm5

		zeroClamp
	}
}

lights/ftlight1
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/ftlight1
		colored
		zeroClamp
	}
}

lights/ftlight1c
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/ftlight1c
		colored
		zeroClamp
	}
}



///// SCAF3

lights/scaf3
{
	{
		forceHighQuality
		map	lights/light_scaf3
		colored
		zeroClamp
	}
}


// Parm 4 controls speed, parm5 controls min light level
// assumes table range is 0 to 1
lights/scaf3_flkr
{
	{
		forceHighQuality
		map	lights/light_scaf3
		color		( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ( flicker_elec[ time * parm4 ])),
					( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ( flicker_elec[ time * parm4 ])),
					( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ( flicker_elec[ time * parm4 ])),
					1.0
		zeroClamp
	}
}

// Parm 4 controls speed, parm5 controls min light level
// Maybe create alternate sin table to avoid "+1 * 0.5" nonsense?
lights/scaf3_pulse
{
	{
		forceHighQuality
		map	lights/light_scaf3
		color		( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( sintable[ time * parm4 ] + 1 ) * 0.5 ))),
					( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( sintable[ time * parm4 ] + 1 ) * 0.5 ))),
					( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( sintable[ time * parm4 ] + 1 ) * 0.5 ))),
					1.0
		zeroClamp
	}
}

// Parm3 - phase offset
// Parm4 - pulse speed
// Parm5 - min light level ( 0 - 1 )
lights/scaf3_heartbeat1
{
	{
		forceHighQuality
		map	lights/light_scaf3
		color		( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ( heartbeat1[ parm3 + ( time * parm4 )])),
					( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ( heartbeat1[ parm3 + ( time * parm4 )])),
					( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ( heartbeat1[ parm3 + ( time * parm4 )])),
					1.0
		zeroClamp
	}
}

// Parm3 - phase offset
// Parm4 - pulse speed
// Parm5 - min light level ( 0 - 1 )
lights/scaf3_heartbeat2
{
	{
		forceHighQuality
		map	lights/light_scaf3
		color		( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ( heartbeat2[ parm3 + ( time * parm4 )])),
					( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ( heartbeat2[ parm3 + ( time * parm4 )])),
					( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ( heartbeat2[ parm3 + ( time * parm4 )])),
					1.0
		zeroClamp
	}
}

///////////////////////////////////////

//        spherebreed  begin         //

///////////////////////////////////////

lights/spherebreed/square_logr_1c
{
	{
		forceHighQuality
		map	lights/spherebreed/square_logr_1c
		colored
		zeroClamp
	}
}


///////////////////////////////////////

//         spherebreed  end          //

///////////////////////////////////////

lights/circlelight1
{
	{
		forceHighQuality
		map lights/circlelight1
		colored
		zeroClamp
	}
}

lights/circlelight1_sound
{
	{
		forceHighQuality
		map lights/circlelight1
		red		parm0 * sound
		green	parm1 * sound
		blue	parm2 * sound
		zeroClamp
	}
}

lights/circlelight1_nofalloff
{
	lightFalloffImage	_noFalloff		// by default, stay bright almost all the way to the end
	{
		forceHighQuality
		map lights/circlelight1
		colored
		zeroClamp
	}
}

lights/circlelight2
{
	{
		forceHighQuality
		map lights/circlelight2
		colored
		zeroClamp
	}
}

lights/circlelight2_sound
{
	{
		forceHighQuality
		map lights/circlelight2
		red parm0 * ( 1 + ( sound * 0.1 ) )
		green parm1 * ( 1 + ( sound * 0.1 ) )
		blue parm2 * ( 1 + ( sound * 0.1 ) )
		zeroClamp
	}
}

lights/circlelight2_soundb
{
	{
		forceHighQuality
		map lights/circlelight2
		red parm0 * sound
		green parm1 * sound
		blue parm2 * sound
		zeroClamp
	}
}

lights/circlelight3
{
	{
		forceHighQuality
		map lights/circlelight3
		colored
		zeroClamp
	}
}

lights/circlelight4
{
	{
		forceHighQuality
		map lights/circlelight4
		colored
		zeroClamp
	}
}

lights/circlelight5
{
	{
		forceHighQuality
		map lights/circlelight5
		colored
		zeroClamp
	}
}

lights/circlelight5_soundoption
{
	{ if ( parm6 == 0 )
		forceHighQuality
		map lights/circlelight5
		colored
		zeroClamp
	}

	{ if ( parm6 != 0 )
		forceHighQuality
		map lights/circlelight5
		red 	parm0 * sound
		green 	parm1 * sound
		blue 	parm2 * sound
		zeroClamp
	}
}

lights/circlelight6
{
	{
		forceHighQuality
		map lights/circlelight6
		colored
		zeroClamp
	}
}

lights/circlelight6_soundparm3
{
	{
		forceHighQuality
		map lights/circlelight6
		color
			parm0 * sound + parm3,
			parm1 * sound + parm3,
			parm2 * sound + parm3,
			0
		zeroClamp
	}
}

lights/circlelight6_sound
{
	{	if ( parm7 == 0 )
		forceHighQuality
			map lights/circlelight6

			red		( parm0 * 0.1 ) + ( parm0 * 0.5 * sound )
			green	( parm1 * 0.1 ) + ( parm1 * 0.5 * sound )
			blue	( parm2 * 0.1 ) + ( parm2 * 0.5 * sound )

			zeroClamp
	}
	{	if ( parm7 == 1 )
		forceHighQuality
			map lights/circlelight6

			red		( parm0 * 0.7 ) + ( parm0 * 0.3 * sound )
			green	( parm1 * 0.7 ) + ( parm1 * 0.3 * sound )
			blue	( parm2 * 0.7 ) + ( parm2 * 0.3 * sound )

			zeroClamp
	}
}

lights/circlelight7
{
	{
		forceHighQuality
		map lights/circlelight7
		colored
		zeroClamp
	}
}

lights/circlelight8
{
	{
		forceHighQuality
		map lights/circlelight8
		colored
		zeroClamp
	}
}

lights/circlelight8_torch
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map 	lights/circlelight8
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
		zeroClamp
	}
}

lights/circlelight9
{
	{
		forceHighQuality
		map lights/circlelight9
		colored
		zeroClamp
	}
}

lights/circlelight10
{
	{
		forceHighQuality
		map lights/circlelight10
		colored
		zeroClamp
	}
}

lights/pinlight
{
	{
		forceHighQuality
		map lights/pinlight
		colored
		zeroClamp
	}
}

lights/hanglight
{
	{	if ( parm7 == 0 )
		forceHighQuality
			map lights/hanglight
			//colored

			red		( parm0 * 0.8 ) + ( parm0 * 0.2 * sound )
			green	( parm1 * 0.8 ) + ( parm1 * 0.2 * sound )
			blue	( parm2 * 0.8 ) + ( parm2 * 0.2 * sound )

			zeroClamp
	}
	{	if ( parm7 == 1 )
		forceHighQuality
			map lights/hanglight

			red		( parm0 * 0.2 ) + ( parm0 * 0.7 * sound )
			green	( parm1 * 0.2 ) + ( parm1 * 0.7 * sound )
			blue	( parm2 * 0.2 ) + ( parm2 * 0.7 * sound )
			//colored
			zeroClamp
	}
}

lights/light_torch
{
	{
		forceHighQuality
		map			lights/light_orglight1
		color		parm0 *( upanddown[ time * 0.7 ]),
					parm1 *( upanddown[ time * 0.7 ]),
					parm2 *( upanddown[ time * 0.7 ]),
					1.0
		rotate	time * 0.05
		zeroClamp
	}
	{
		forceHighQuality
		map			lights/light_orglight2
		color		parm0 *( jitter2[ time * 0.7 ]),
					parm1 *( jitter2[ time * 0.7 ]),
					parm2 *( jitter2[ time * 0.7 ]),
					1.0
		rotate	time * -0.06
		zeroClamp
	}
	{
		forceHighQuality
		map			lights/light_orglight3
		color		parm0 *( upanddown[ time * 0.2]),
					parm1 *( upanddown[ time * 0.2 ]),
					parm2 *( upanddown[ time * 0.2 ]),
					1.0
		rotate	time * 0.06
		zeroClamp
	}
}



lights/directional_south
{
	lightFalloffImage	lights/falloff_curve1
	{
		forceHighQuality
		map			lights/directional_south
		color			3*parm0, 3*parm1, 3*parm2, 1.0
		zeroClamp
	}
}

lights/directional_north
{
	lightFalloffImage	lights/falloff_curve1
	{
		forceHighQuality
		map			lights/directional_north
		color			3*parm0, 3*parm1, 3*parm2, 1.0
		zeroClamp
	}
}

lights/directional_east
{
	lightFalloffImage	lights/falloff_curve1
	{
		forceHighQuality
		map			lights/directional_east
		color			3*parm0, 3*parm1, 3*parm2, 1.0
		zeroClamp
	}
}

lights/directional_west
{
	lightFalloffImage	lights/falloff_curve1
	{
		forceHighQuality
		map			lights/directional_west
		color			3*parm0, 3*parm1, 3*parm2, 1.0
		zeroClamp
	}
}




lights/light_orglight1B
{
	{
		forceHighQuality
		map			lights/light_orglight1
		color		parm0 *( upanddown[ time * 0.7 ]),
					parm1 *( upanddown[ time * 0.7 ]),
					parm2 *( upanddown[ time * 0.7 ]),
					1.0
		rotate	time * 0.05
		zeroClamp
	}
	{
		forceHighQuality
		map			lights/light_orglight2
		color		parm0 *( jitter2[ time * 0.7 ]),
					parm1 *( jitter2[ time * 0.7 ]),
					parm2 *( jitter2[ time * 0.7 ]),
					1.0
		rotate	time * -0.06
		zeroClamp
	}
	{
		forceHighQuality
		map			lights/light_orglight3
		color		parm0 *( upanddown[ time * 0.2]),
					parm1 *( upanddown[ time * 0.2 ]),
					parm2 *( upanddown[ time * 0.2 ]),
					1.0
		rotate	time * 0.06
		zeroClamp
	}
}

lights/light_orglight2
{
	{
		forceHighQuality
		map			lights/light_orglight2
		color			1*parm0, 1*parm1, 1*parm2, 1.0
		zeroClamp
	}
}


lights/light_circuit2
{
	{
		forceHighQuality
		map			lights/light_circuit2
		color			3*parm0, 3*parm1, 3*parm2, 1.0
		zeroClamp
	}
}

lights/light_circuit3C
{
	{
		forceHighQuality
		map			lights/light_circuit3
		color			3*parm0, 3*parm1, 3*parm2, 1.0
		zeroClamp
	}
	{
		forceHighQuality
		map			lights/light_circuit6
		color			3*parm0, 3*parm1, 3*parm2, 1.0
		zeroClamp
	}
}

lights/light_circuit3Cjitter
{
	{
		forceHighQuality
		map			lights/light_circuit3
		color			3*parm0, 3*parm1, 3*parm2, 1.0
		zeroClamp
	}
	{
		forceHighQuality
		map			lights/light_circuit6
		color		parm0 *4*( upanddown2[ time * 0.4 ]),
					parm1 *4*( upanddown2[ time * 0.4 ]),
					parm2 *4*( upanddown2[ time * 0.4 ]),
					1.0
		zeroClamp
	}
}

//=======================================================
//Lights for 9-15-02
//=======================================================



lights/light_Xdots1E
{
	{
		forceHighQuality
		map			lights/light_Xdots1
		color			4*parm0, 4*parm1, 4*parm2, 1.0
		centerscale	(20 * OneToZeroSnap [time * 0.5]) + 1.2, (20 * OneToZeroSnap [time * 0.5]) + 1.2
		rotate		time * 0.25
		zeroClamp
	}
}

lights/light_Xdots1E_2
{
	{
		forceHighQuality
		map			lights/light_Xdots1
		color			4*parm0, 4*parm1, 4*parm2, 1.0
		centerscale	(20 * OneToZeroSnap [time * 0.5]) + 1.2, (20 * OneToZeroSnap [time * 0.5]) + 1.2
		rotate		time * 0.5
		zeroClamp
	}
}





//=======================================================
//Randy's lights
//=======================================================

lights/light_bcir1
{
	{

		forceHighQuality
		map lights/light_bcir1
		zeroClamp
		color		1*parm0, 1*parm1, 1*parm2, 1.0
	}
}




//=======================================================
//biopulse lights + flares
//=======================================================


// parm3 - phase, 4 - flare size, 5 - min color, 6 - speed

textures/sfx/biopulse2_flare
{
	qer_editorimage		textures/editor/flare
	discrete
	noshadows
	translucent
	nonsolid
	deform flare 		( 16 + parm4 )
	{
		blend		add
		forceHighQuality
		map			_quadratic
		color		( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2[ parm3 + ( time * parm6 ) ] + 1 ) * 0.5 ))),
				( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2[ parm3 + ( time * parm6 ) ] + 1 ) * 0.5 ))),
				( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2[ parm3 + ( time * parm6 ) ] + 1 ) * 0.5 ))),
				1.0
//		vertexcolor
	}
}

lights/biopulse2
{

	{
		forceHighQuality
		map			lights/squarelight3
		color		( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				1.0
//		vertexcolor
		zeroClamp
	}
}

// parm3 - phase, 4 - flare size, 5 - min color, 6 - speed
lights/biopulse2_times2
{

	{
		forceHighQuality
		map			lights/squarelight3
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				1.0
//		vertexcolor
		zeroClamp
	}
}

// parm3 - phase, 4 - flare size, 5 - min color, 6 - speed
lights/biopulse2_times4
{

	{
		forceHighQuality
		map			lights/squarelight3
		color		4 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				4 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				4 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				1.0
//		vertexcolor
		zeroClamp
	}
}

// parm3 - phase, 4 - flare size, 5 - min color, 6 - speed

lights/light_orglight4
{
	{
		forceHighQuality
		map			lights/light_orglight2b
		color			parm0 *( tim1[ time * 0.1 ])*2,
					parm1 *( tim1[ time * 0.1 ])*2,
					parm2 *( tim1[ time * 0.1 ])*2,
					1.0
		rotate	time * 0.02
		zeroClamp
	}
//	{
//		map			lights/light_scaf5
//		color			parm0 *( alpha[ time * 0.7 ])*2,
//					parm1 *( alpha[ time * 0.7 ])*2,
//					parm2 *( alpha[ time * 0.7 ])*2,
//					1.0
//		zeroClamp
//	}
//	{
//		map			lights/light_scaf6
//		color			parm0 *( alpha_opp[ time * 0.7 ])*2,
//					parm1 *( alpha_opp[ time * 0.7 ])*2,
//					parm2 *( alpha_opp[ time * 0.7 ])*2,
//					1.0
//		zeroClamp
//	}
	{
		forceHighQuality
		map			lights/light_scaf6
		color			parm0 *( flicker2[ time * 0.25 ])*2,
					parm1 *( flicker2[ time * 0.25 ])*2,
					parm2 *( flicker2[ time * 0.25 ])*2,
					1.0
		zeroClamp
	}
}

lights/light_orglight4_norotate
{
	{
		forceHighQuality
		map			lights/light_orglight2b
		color			parm0 *( tim1[ time * 0.1 ])*2,
					parm1 *( tim1[ time * 0.1 ])*2,
					parm2 *( tim1[ time * 0.1 ])*2,
					1.0
		zeroClamp
	}
	{
		forceHighQuality
		map			lights/light_scaf6
		color			parm0 *( flicker2[ time * 0.25 ])*2,
					parm1 *( flicker2[ time * 0.25 ])*2,
					parm2 *( flicker2[ time * 0.25 ])*2,
					1.0
		zeroClamp
	}
}

lights/biopulse2_circlelight1
{

	{
		forceHighQuality
		map			lights/circlelight1
		color		2*( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2*( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2*( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				1.0
		zeroClamp
	}
}

lights/biopulse2_circlelight6
{

	{
		forceHighQuality
		map			lights/circlelight6
		color		2*( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2*( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2*( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				1.0
		zeroClamp
	}
}


lights/biopulse2_circlelight9
{

	{
		forceHighQuality
		map			lights/circlelight9
		color		2*( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2*( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2*( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				1.0
		zeroClamp
	}
}

lights/biopulse2_light_orglight2B
{

	{
		forceHighQuality
		map			lights/light_orglight2b
		color		2*( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2*( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2*( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				1.0
		zeroClamp
	}
}


lights/light_orglight2b_falloff
{
	lightFalloffImage	makeintensity( lights/squarelight1c )
	{
		forceHighQuality
		map		lights/light_orglight2b
		color			parm0 *( flicker4[time *1.5])*2,
					parm1 *( flicker4[time *1.5])*2,
					parm2 *( flicker4[time *1.5])*2,
					1.0
		zeroClamp
	}
}

lights/light_orglight2b_falloff2
{
	lightFalloffImage	makeintensity( lights/squarelight1c )
	{
		forceHighQuality
		map		lights/light_orglight2b
		color			parm0 *( flicker4[time *1.5])*2,
					parm1 *( flicker4[time *1.5])*2,
					parm2 *( flicker4[time *1.5])*2,
					1.0
		rotate	time * 0.02
		zeroClamp
	}
}

lights/light_oozetube2
{
	{
		forceHighQuality
		map			lights/light_oozetube2A
		color			parm0 *( tim1[ time * 0.1 ])*2,
					parm1 *( tim1[ time * 0.1 ])*2,
					parm2 *( tim1[ time * 0.1 ])*2,
					1.0
		rotate	time * 0.02
//		rotate	bloodflow[time * 0.025] - time * 0.3
		zeroClamp
	}
	{
		forceHighQuality
		map			lights/light_oozetube2b
		color			parm0 *( flicker2[ time * 0.25 ])*2,
					parm1 *( flicker2[ time * 0.25 ])*2,
					parm2 *( flicker2[ time * 0.25 ])*2,
					1.0
		rotate	time * -0.03
//		rotate	-2 * bloodflow[time * 0.025] - time * 0.3
		zeroClamp
	}
}



lights/disc_light1
{
	lightFalloffImage	lights/falloff_curve1
		{
		forceHighQuality
		map lights/disc_light_projection
		colored
		zeroClamp
	}
}

lights/disc_light1_biopulse
{
	lightFalloffImage	lights/falloff_curve1
	{
		forceHighQuality
		map lights/disc_light_projection
		color		( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				1.0
		zeroClamp
	}
}

lights/glass_struts_proj
{
	lightFalloffImage	makeintensity( lights/squarelight )
//	lightFalloffImage	lights/falloff_curve1
	{
		forceHighQuality
		map lights/glass_struts_proj
		colored
		zeroClamp
	}
}

lights/glass_struts_proj_90
{
	lightFalloffImage	makeintensity( lights/squarelight )
//	lightFalloffImage	lights/falloff_curve1
	{
		forceHighQuality
		map lights/glass_struts_proj
		colored
		rotate .25
		zeroClamp
	}
}

lights/glass_struts_proj_6bar
{
	lightFalloffImage	makeintensity( lights/squarelight )
//	lightFalloffImage	lights/falloff_curve1
	{
		forceHighQuality
		map lights/glass_struts_proj_6bar
		colored
		rotate .25
		zeroClamp
	}
}


lights/glass_struts2_proj
{
	lightFalloffImage	makeintensity( lights/squarelight )
//	lightFalloffImage	lights/falloff_curve1
		{
		forceHighQuality
		map lights/glass_struts2_proj
		colored
		zeroClamp
	}
}

lights/distanceLight
{
	lightFalloffImage	makeintensity( lights/squarelight1a )
	{
		forceHighQuality
		map lights/squarelight1
		rgb 1 - distance * 0.0025
		zeroclamp
	}
}

lights/glass_struts3_biopulse
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/glass_struts3_proj
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/glass_struts3_biopulse_square
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/glass_struts3_square
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/glass_struts4_biopulse
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/glass_struts4_proj
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/glass_struts4_biopulse_square
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/glass_struts4_square
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/glass_struts2_biopulse
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/glass_struts2_proj
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/glass_struts_biopulse_6bar
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/glass_struts_proj_6bar
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
		rotate .25
//		vertexcolor
		zeroClamp
	}
}

lights/glass_struts_biopulse_90
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/glass_struts_proj
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		rotate .25
		zeroClamp
	}
}

lights/glass_struts_biopulse
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/glass_struts_proj
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}


lights/circlelight11
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/circlelight11
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/light_orglight5
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/light_orglight5
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/light_orglight5_90
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/light_orglight5
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		rotate .25
		zeroClamp
	}
}

lights/light_orglight6
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/light_orglight6
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/light_orglight6b
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			textures/organic_light/orglightpatch6_add
		colored
		zeroClamp
	}
}

lights/light_orglight7
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/light_orglight7
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/light_orglight7_90
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/light_orglight7
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		rotate .25
		zeroClamp
	}
}

lights/light_orglight8
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/light_orglight8
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/light_orglight8_90
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/light_orglight8
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		rotate .25
		zeroClamp
	}
}

lights/light_orglight9
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/light_orglight9
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/light_orglight10
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/orglightpatch10_add2
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/light_orglight11
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/orglightpatch11_add2
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/light_orglight12
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/orglightpatch12_add2
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/light_orglight13
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/orglightpatch13_add2
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/light_orglight14
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/orglightpatch14_add2
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/light_lightpatch6
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/lightpatch6_add2
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( jitter1 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( jitter1 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( jitter1 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/light_kf_light_01
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/kf_light_01_add2
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( jitter1 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( jitter1 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( jitter1 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/light_tubelight_e1
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/tubelight_e1_add2
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( jitter1 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( jitter1 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
				2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( jitter1 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/emergencylight1
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/emergencylight1
		//color		1 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( heartbeat3 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
		//			1 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( heartbeat3 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
		//			1 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( heartbeat3 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
		color		2 * ( parm0 * (heartbeat3 [ time * 1.5 ])),
					2 * ( parm1 * (heartbeat3 [ time * 1.5 ])),
					2 * ( parm2 * (heartbeat3 [ time * 1.5 ])),
					1.0

//		vertexcolor
		zeroClamp
	}
}

lights/emergencylight1_sound
{
	lightFalloffImage	makeintensity( lights/squarelight )

	{ if ( sound <= 0 )
		forceHighQuality
		map			lights/emergencylight1
		color		0, 0, 0, 1
		zeroClamp
	}

	{ if ( sound > 0 )
		forceHighQuality
		map			lights/emergencylight1
		color		parm0 * sound,
					parm1 * sound,
					parm2 * sound,
					1.0
//		red			2 * (Parm0 * 0.2) + ( ( soundZone32 [sound * (Parm0 * 0.8)] ) / 32 )
//		green 		2 * (Parm1 * 0.2) + ( ( soundZone32 [sound * (Parm1 * 0.8)] ) / 32 )
//		blue		2 * (Parm2 * 0.2) + ( ( soundZone32 [sound * (Parm2 * 0.8)] ) / 32 )
		zeroClamp
	}
}

lights/emergencylight1a
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/emergencylight1a
		color		2 * ( parm0 * (heartbeat3 [ time * 1.5 ])),
					2 * ( parm1 * (heartbeat3 [ time * 1.5 ])),
					2 * ( parm2 * (heartbeat3 [ time * 1.5 ])),
					1.0

//		vertexcolor
		zeroClamp
	}
}

lights/emergencylight1a_sound
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/emergencylight1a
		color		2 * ( parm0 * sound ),
					2 * ( parm1 * sound ),
					2 * ( parm2 * sound ),
					1.0
		zeroClamp
	}
}

lights/bio_organic_309
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/bio_organic_309
		color		2 * ( parm0 * parm5 ) + (( 1 - parm5 ) * parm0  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm1 * parm5 ) + (( 1 - parm5 ) * parm1  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					2 * ( parm2 * parm5 ) + (( 1 - parm5 ) * parm2  * ((( biopulse2 [ parm3 + ( time * parm6 ) ] ) * 0.5 ))),
					1.0
//		vertexcolor
		zeroClamp
	}
}

lights/energyTube
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map			lights/energyTube
		color		parm0 * (jitter2[time*1.5]),
					parm1 * (jitter2[time*1.5]),
					parm2 * (jitter2[time*1.5]),
					1.0
		rotate		time * 0.6
		zeroClamp
}
	{
		forceHighQuality
		map			lights/energyTube
		color		parm0 * (jitter2[time*1.5]),
					parm1 * (jitter2[time*1.5]),
					parm2 * (jitter2[time*1.5]),
					1.0
		rotate		time * 0.2
		zeroClamp
	}
}


lights/energyTube_falloff2
{
	lightFalloffImage	makeintensity( lights/squarelight1c )
	{
		forceHighQuality
		map			lights/energyTube
		color		parm0 * (jitter2[time*1.5]),
					parm1 * (jitter2[time*1.5]),
					parm2 * (jitter2[time*1.5]),
					1.0
		rotate		time * 0.6
		zeroClamp
}
	{
		forceHighQuality
		map			lights/energyTube
		color		parm0 * (jitter2[time*1.5]),
					parm1 * (jitter2[time*1.5]),
					parm2 * (jitter2[time*1.5]),
					1.0
		rgb 1 * jitter2[time*1.5]
		rotate		time * 0.2
		zeroClamp
	}
}


lights/energyTube_falloff2b
{
	lightFalloffImage	makeintensity( lights/squarelight1c )
	{
		forceHighQuality
		map			lights/energyTube
		color		parm0 * (jitter2[time*1.5]),
					parm1 * (jitter2[time*1.5]),
					parm2 * (jitter2[time*1.5]),
					1.0
		rgb 1 * jitter2[time*1.5]
		rotate		time * 0.6
		zeroClamp
	}
}

lights/shootswitch_001
{
	{
		forceHighQuality
		map lights/shootswitch_001_add3b
		rgb threestage  [time * 0.7 + 0 / 4] - .1

		zeroClamp
	}
	{
		forceHighQuality
		map lights/shootswitch_001_add2b
		rgb threestage  [time * 0.7 + 1 / 4] - .1
		zeroClamp
	}
	{
		forceHighQuality
		map lights/shootswitch_001_add1b
		rgb threestage  [time * 0.7 + 2 / 4] - .1
		zeroClamp
	}
}

lights/square_flicker1
{
	{
		forceHighQuality
		map	lights/squarelight1
		color	parm0 *( flicker4[time *1.5])*2,
				parm1 *( flicker4[time *1.5])*2,
				parm2 *( flicker4[time *1.5])*2,
				1.0
		zeroClamp
	}
}

//SAVE for future map use : for use with locked doors. This light will change color automatically when targeted as a buddy by a door.
lights/doorstatus
{
	lightFalloffImage	makeintensity( lights/squarelight1a )


//	{ if ( parm7 == 0 && parm6 == 0 )
//		blend add
//		zeroClamp
//		forceHighQuality
//		map lights/squarelight1
//		colored
////		red 1.0 	green 0.75 		blue 0		// CDOOR_ADD_LOCKED
//	}

	{ if ( parm7 < 2 && parm6 == 0 )
		blend add
		zeroClamp
		forceHighQuality
		map lights/squarelight1
		red 	0.35
		green	0.83
		blue 	1		// CDOOR_ADD_OPEN
	}

	{ if ( parm7 < 2 && parm6 == 1 )
		blend add
		zeroClamp
		forceHighQuality
		map lights/squarelight1
		red 	0.35 * ( airlockWaitTable [ time * 0.8 ] )		// CDOOR_ADD_OPEN_WAITING
		green	0.83 * ( airlockWaitTable [ time * 0.8 ] )	// CDOOR_ADD_OPEN_WAITING
		blue	1	 * ( airlockWaitTable [ time * 0.8 ] )		// CDOOR_ADD_OPEN_WAITING
	}

	{ if ( parm7 == 2 && parm6 == 0)
		blend add
		zeroClamp
		forceHighQuality
		map lights/squarelight1
		red 0.884 	green  0.0 		blue 0.0		// locked
	}

	{ if ( parm7 == 2 && parm6 == 1 )
		blend add
		zeroClamp
		forceHighQuality
		map lights/squarelight1
		red 0.884 * ( airlockWaitTable [ time * 0.8 ] )		// locked
		green 0.0
		blue 0.0
	}

	{ if ( parm7 == 3 )
		blend add
		zeroClamp
		forceHighQuality
		map lights/squarelight1
		red 	0
		green	0
		blue 	0
	}
}


lights/defaultMuzzleFlash
{
	noshadows
	//lightFalloffImage	makeintensity( lights/falloff_curve2 )
	{
		forceHighQuality
		map lights/circlelight11
		rotate		random[time * .3 ] * -1
		red			parm0 * 2.0 * flicker_on1[ time * 0.5 ]
		green		parm1 * 2.0 * flicker_on1[ time * 0.5 ]
		blue		parm2 * 2.0 * flicker_on1[ time * 0.5 ]
		zeroclamp
	}
}

//==============================================================
//MFLYNN SCRIPT LIGHTS - SAVE
//==============================================================

///////////////////SAVE -mflynn
//lights/distance_500_colored
//
//parm0-3 rgba
//parm4 saved for timing
//parm5 0 = fade in on approach; 1 = fade out on approach
//parm6 number do modify the 500 unit range at which these effects take place
//	( 500 + parm6 ) = distance to begin effect
//parm7 unused
///////////////////
lights/distance_500
{
	{if ( distance >= ( 500 + parm6 ) && parm5 == 0 )
		forceHighQuality
		map		lights/squarelight1
		colored
		zeroClamp
	//lighten
		red			parm0 * 0
		green		parm1 * 0
		blue		parm2 * 0
	}
	{if ( distance < ( 500 + parm6 ) && parm5 == 0 )
		forceHighQuality
		map		lights/squarelight1
		colored
		zeroClamp
	//lighten
		red			parm0 * ( ( ( 500 + parm6 ) - distance ) / ( 500 + parm6 ) )
		green		parm1 * ( ( ( 500 + parm6 ) - distance ) / ( 500 + parm6 ) )
		blue		parm2 * ( ( ( 500 + parm6 ) - distance ) / ( 500 + parm6 ) )
	}
	{if ( distance >= ( 500 + parm6 ) && parm5 == 1 )
		forceHighQuality
		map		lights/squarelight1
		colored
		zeroClamp
	//darken
		red			parm0
		green		parm1
		blue		parm2
	}
	{if ( distance < ( 500 + parm6 ) && parm5 == 1 )
		forceHighQuality
		map		lights/squarelight1
		colored
		zeroClamp
	//darken
		red			parm0 * ( distance / ( 500 + parm6 ) )
		green		parm1 * ( distance / ( 500 + parm6 ) )
		blue		parm2 * ( distance / ( 500 + parm6 ) )
	}
}

////SAVE -mflynn
//example colored light-fixture entity texture with the above settings
////
textures/tech_light/biotech5_trim1_distance_500
{
	qer_editorimage 	textures/tech_light/biotech5_trim1_d
	bumpforceHighQuality
		map 		textures/tech_light/biotech5_trim1_local
	diffuseforceHighQuality
		map	 	textures/tech_light/biotech5_trim1_d
	specularforceHighQuality
		map		textures/tech_light/biotech5_trim1_s

	{if ( distance >= ( 500 + parm6 ) && parm5 == 0 )
		blend add
		forceHighQuality
		map textures/tech_light/biotech5_trim1_a2
	//lighten
		red			parm0 * 0
		green		parm1 * 0
		blue		parm2 * 0
	}
	{if ( distance < ( 500 + parm6 ) && parm5 == 0 )
		blend add
		forceHighQuality
		map textures/tech_light/biotech5_trim1_a2
	//lighten
		red			parm0 * ( ( ( 500 + parm6 ) - distance ) / ( 500 + parm6 ) )
		green		parm1 * ( ( ( 500 + parm6 ) - distance ) / ( 500 + parm6 ) )
		blue		parm2 * ( ( ( 500 + parm6 ) - distance ) / ( 500 + parm6 ) )
	}
	{if ( distance >= ( 500 + parm6 ) && parm5 == 1 )
		blend add
		forceHighQuality
		map textures/tech_light/biotech5_trim1_a2
	//darken
		red			parm0
		green		parm1
		blue		parm2
	}
	{if ( distance < ( 500 + parm6 ) && parm5 == 1 )
		blend add
		forceHighQuality
		map textures/tech_light/biotech5_trim1_a2
	//darken
		red			parm0 * ( distance / ( 500 + parm6 ) )
		green		parm1 * ( distance / ( 500 + parm6 ) )
		blue		parm2 * ( distance / ( 500 + parm6 ) )
	}
}

lights/roundheartbeat_flickerOff
{

	{if (parm4 == 0)
		forceHighQuality
		map			lights/defaultpointlight
		color		parm0 * heartbeat3[ time * (1 + parm5) ],//red
					parm1 * heartbeat3[ time * (1 + parm5) ],//green
					parm2 * heartbeat3[ time * (1 + parm5) ],//blue
					1										 //alpha
		zeroClamp
	}
	{if (parm4 != 0 )
		forceHighQuality
		map			lights/defaultpointlight
		red			parm0 * ( flicker_off1[ (time + parm4) * (1 + parm6) ] )
		green		parm1 * ( flicker_off1[ (time + parm4) * (1 + parm6) ] )
		blue		parm2 * ( flicker_off1[ (time + parm4) * (1 + parm6) ] )
		zeroClamp
	}
}

//SAVE -mflynn
lights/squareheartbeat_flickerOff
{

	{if (parm4 == 0)
		forceHighQuality
		map			lights/squarelight3
		color		parm0 * heartbeat3[ time * (1 + parm5) ],//red
					parm1 * heartbeat3[ time * (1 + parm5) ],//green
					parm2 * heartbeat3[ time * (1 + parm5) ],//blue
					1										 //alpha
		zeroClamp
	}
	{if (parm4 != 0 )
		forceHighQuality
		map			lights/squarelight3
		red			parm0 * ( flicker_off1[ (time + parm4) * (1 + parm6) ] )
		green		parm1 * ( flicker_off1[ (time + parm4) * (1 + parm6) ] )
		blue		parm2 * ( flicker_off1[ (time + parm4) * (1 + parm6) ] )
		zeroClamp
	}
}

//SAVE -mflynn
//parm4 triggerable
lights/square_flicker_off1
{
	{if ( parm4 == 0 )
		forceHighQuality
		map	lights/squarelight1
		red		parm0
		green	parm1
		blue	parm2
		zeroClamp
	}
	{if ( parm4 != 0 )
		forceHighQuality
		map	lights/squarelight1
		red		parm0 * ( flicker_off1 [ (time + parm4) * ( 0.50 + parm6) ] )
		green	parm1 * ( flicker_off1 [ (time + parm4) * ( 0.50 + parm6) ] )
		blue	parm2 * ( flicker_off1 [ (time + parm4) * ( 0.50 + parm6) ] )
		zeroClamp
	}
}

//SAVE -mflynn
//colorable within a certain degree:
//	-saturated blue turns red/purple
//	-brighter, desaturated colors of any tone work fine
//	-all colors do not end up at the same color destination.
//fade and pulse speed:	 parm6 ( -0.24 to any positive number; slower to faster )
//rotation speed:		 parm5 ( -0.99 to any positive number; slower to faster )
lights/square_emergencyPulse_whiteToRed
{
	{if ( parm4 == 0 )
		forceHighQuality
		map 	lights/light_org1
		red		parm0
		green	parm1
		blue	parm2
		//centerscale	jitter2 [ (time * 0.1) ], jitter2 [ (time * 0.1) ]
		rotate  time * 0.15 * ( parm5 + 1 )
		zeroClamp
	}
	{if ( parm4 == 0 )
		forceHighQuality
		map 	lights/light_org1
		red		parm0
		green	parm1
		blue	parm2
		//centerscale	jitter2 [ (time * 0.07) ], jitter2 [ (time * 0.07) ]
		rotate  time * -0.1 * ( parm5 + 1 )
		zeroClamp
	}
	//fade to red
	{if ( parm4 != 0 && ( time + parm4 ) < ( 1 / ( 0.25 + parm6 ) ) )
		forceHighQuality
		map 	lights/light_org1
		red		parm0 * ( whiteToRed_Red [ (time + parm4) * ( 0.25 + parm6 ) ])
		green	parm1 * ( whiteToRed_Green [ (time + parm4) * ( 0.25 + parm6 ) ])
		blue	parm2 * ( whiteToRed_Blue [ (time + parm4) * ( 0.25 + parm6 ) ])
		rotate  time * 0.15 * ( parm5 + 1 )
		zeroClamp
	}
	{if ( parm4 != 0 && ( time + parm4 ) < ( 1 / ( 0.25 + parm6 ) ) )
		forceHighQuality
		map 	lights/light_org1
		red		parm0 * ( whiteToRed_Red [ (time + parm4) * ( 0.25 + parm6 ) ])
		green	parm1 * ( whiteToRed_Green [ (time + parm4) * ( 0.25 + parm6 ) ])
		blue	parm2 * ( whiteToRed_Blue [ (time + parm4) * ( 0.25 + parm6 ) ])
		rotate  time * -0.1 * ( parm5 + 1 )
		zeroClamp
	}
	//pulse
	{if ( parm4 != 0 && ( time + parm4 ) >= ( 1 / ( 0.25 + parm6 ) ) )
		forceHighQuality
		map 	lights/light_org1
		red		( parm0 * 1.25  ) * ( pulseEmergency [ (time + parm4) * ( 0.25 + parm6) ] )
		green	( parm1 * 0.17 ) * ( pulseEmergency  [ (time + parm4) * ( 0.25 + parm6) ] )
		blue	( parm2 * 0.17 ) * ( pulseEmergency  [ (time + parm4) * ( 0.25 + parm6) ] )
		//centerscale	jitter2 [ (time * 0.1) ], jitter2 [ (time * 0.1) ]
		rotate  time * 0.15 * ( parm5 + 1 )
		zeroClamp
	}
	{if ( parm4 != 0 && ( time + parm4 ) >= ( 1 / ( 0.25 + parm6 ) ) )
		forceHighQuality
		map 	lights/light_org1
		red		( parm0 * 1.25  ) * ( pulseEmergency [ (time + parm4) * ( 0.25 + parm6) ] )
		green	( parm1 * 0.17 ) * ( pulseEmergency [ (time + parm4) * ( 0.25 + parm6) ] )
		blue	( parm2 * 0.17 ) * ( pulseEmergency [ (time + parm4) * ( 0.25 + parm6) ] )
		//centerscale	jitter2 [ (time * 0.07) ], jitter2 [ (time * 0.07) ]
		rotate  time * -0.1 * ( parm5 + 1 )
		zeroClamp
	}
}

//SAVE -mflynn
lights/square_emergencyPulse_redToWhite
{
	//red
	{if ( parm4 == 0 )
		forceHighQuality
		map 	lights/light_org1
		red		parm0 * 1.25
		green	parm1 * 0.17
		blue	parm2 * 0.17
		//centerscale	jitter2 [ (time * 0.1) ], jitter2 [ (time * 0.1) ]
		rotate  time * 0.15 * ( parm5 + 1 )
		zeroClamp
	}
	{if ( parm4 == 0 )
		forceHighQuality
		map 	lights/light_org1
		red		parm0 * 1.25
		green	parm1 * 0.17
		blue	parm2 * 0.17
		//centerscale	jitter2 [ (time * 0.07) ], jitter2 [ (time * 0.07) ]
		rotate  time * -0.1 * ( parm5 + 1 )
		zeroClamp
	}
	//fade to 'white'
	{if ( parm4 != 0 && ( time + parm4 ) < ( 1 / ( 0.25 + parm6 ) ) )
		forceHighQuality
		map 	lights/light_org1
		red		parm0 * ( redToWhite_Red [ (time + parm4) * ( 0.25 + parm6 ) ])
		green	parm1 * ( redToWhite_Green [ (time + parm4) * ( 0.25 + parm6 ) ])
		blue	parm2 * ( redToWhite_Blue [ (time + parm4) * ( 0.25 + parm6 ) ])
		rotate  time * 0.15 * ( parm5 + 1 )
		zeroClamp
	}
	{if ( parm4 != 0 && ( time + parm4 ) < ( 1 / ( 0.25 + parm6 ) ) )
		forceHighQuality
		map 	lights/light_org1
		red		parm0 * ( redToWhite_Red [ (time + parm4) * ( 0.25 + parm6 ) ])
		green	parm1 * ( redToWhite_Green [ (time + parm4) * ( 0.25 + parm6 ) ])
		blue	parm2 * ( redToWhite_Blue [ (time + parm4) * ( 0.25 + parm6 ) ])
		rotate  time * -0.1 * ( parm5 + 1 )
		zeroClamp
	}
	//'white'
	{if ( ( parm4 != 0 ) && ( time + parm4 ) >= ( 1 / ( 0.25 + parm6 ) ) )
		forceHighQuality
		map 	lights/light_org1
		red		parm0
		green	parm1
		blue	parm2
		//centerscale	jitter2 [ (time * 0.1) ], jitter2 [ (time * 0.1) ]
		rotate  time * 0.15 * ( parm5 + 1 )
		zeroClamp
	}
	{if ( ( parm4 != 0 ) && ( time + parm4 ) >= ( 1 / ( 0.25 + parm6 ) ) )
		forceHighQuality
		map 	lights/light_org1
		red		parm0
		green	parm1
		blue	parm2
		//centerscale	jitter2 [ (time * 0.07) ], jitter2 [ (time * 0.07) ]
		rotate  time * -0.1 * ( parm5 + 1 )
		zeroClamp
	}
}

lights/alarm
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{if ( parm6 == parm7 )//on
		forceHighQuality
		map	lights/tech_round1
//		map		lights/defaultpointlight
		red 	1*sound	//Parm0 * sound
		green 	0*sound	//Parm1 * sound
		blue	0*sound	//Parm2 * sound
		zeroclamp
	}
	{if ( parm6 != parm7 )//off
		forceHighQuality
		map	lights/tech_round1
//		map		lights/defaultpointlight
		red 	0
		green 	0
		blue	0
		zeroclamp
	}
}

//SAVE -mflynn
lights/alarm1
{
	//alarm off
	{if ( parm6 == 0 && parm7 == 0 )
		forceHighQuality
		map		lights/defaultpointlight
		red 	(Parm0 * 0.8) + ( ( soundZone64 [sound * 0.2] ) / 64 )
		green 	(Parm1 * 0.8) + ( ( soundZone64 [sound * 0.2] ) / 64 )
		blue	(Parm2 * 0.8) + ( ( soundZone64 [sound * 0.2] ) / 64 )
		zeroclamp
	}
	//alarm on
	{if ( parm6 == 1 && parm7 == 0 )
		forceHighQuality
		map		lights/defaultpointlight
		red 	(Parm0 * 0.5) + ( ( soundZone64 [sound * 0.5] ) / 64 )
		green 	(Parm1 * 0.1) + ( ( soundZone64 [sound * 0.1] ) / 64 )
		blue	(Parm2 * 0.1) + ( ( soundZone64 [sound * 0.1] ) / 64 )

//		red 	(Parm0 * 0.5) * soundTable [ time * ( sound * 0.01 ) ]//Expieriment FIX ME -mf
//		green 	(Parm1 * 0.1) * soundTable [ time * ( sound * 0.01 ) ]
//		blue	(Parm2 * 0.1) * soundTable [ time * ( sound * 0.01 ) ]

		zeroclamp
	}
	//alarm broken
	{if ( parm7 == 1 )
		forceHighQuality
		map		lights/defaultpointlight
		red 	(Parm0 * 0.2) + ( ( soundZone64 [sound * 0.6] ) / 64 )
		green 	(Parm1 * 0.2) + ( ( soundZone64 [sound * 0.6] ) / 64 )
		blue	(Parm2 * 0.4) + ( ( soundZone64 [sound * 0.6] ) / 64 )
		zeroclamp
	}
}

//SAVE -mflynn
//parm4 triggerable
//parm5 sets initial level of brightness.  0, default, = off
//parm6 = speed adjustment
//parm7
//		0 = fadeon
//		1 = fadeout
lights/square_fade_on1
{
	{if ( parm4 == 0 )
		forceHighQuality
		map	lights/squarelight1
		red		parm0 * parm5
		green	parm1 * parm5
		blue	parm2 * parm5
		zeroClamp
	}
	{if ( parm4 != 0 && parm7 == 0 )
		forceHighQuality
		map	lights/squarelight1
		red		parm0 * ( fade_on1 [ (time + parm4) * ( 0.30 + parm6 ) ])
		green	parm1 * ( fade_on1 [ (time + parm4) * ( 0.30 + parm6 ) ])
		blue	parm2 * ( fade_on1 [ (time + parm4) * ( 0.30 + parm6 ) ])
		zeroClamp
	}
	{if ( parm4 != 0 && parm7 == 1 )
		forceHighQuality
		map	lights/squarelight1
		red		parm0 * ( burnout [ (time + parm4) * ( 0.60 + parm6 ) ])
		green	parm1 * ( burnout [ (time + parm4) * ( 0.60 + parm6 ) ])
		blue	parm2 * ( burnout [ (time + parm4) * ( 0.60 + parm6 ) ])
	}
}

//SAVE -mflynn
//parm4 triggerable
lights/defaultpoint_flickerbreak
{
	{if ( parm4 == 0 )
		forceHighQuality
		map		lights/defaultpointlight
		red		parm0
		blue	parm1
		green	parm2
		zeroClamp
	}
	{if ( parm4 != 0 )
		forceHighQuality
		map		lights/defaultpointlight
		red		parm0 * ( mflicker3 [ (time + parm4) * 0.30])
		blue	parm1 * ( mflicker3 [ (time + parm4) * 0.30])
		green	parm2 * ( mflicker3 [ (time + parm4) * 0.30])
		zeroClamp
	}
}

//SAVE -mflynn
//give this a new texture FIX ME
lights/Explosionmflicker_Trig
{
	{if ( parm4 == 0 )
		forceHighQuality
		map		lights/defaultpointlight
		red 	Parm0 * sound
		green 	Parm1 * sound
		blue	Parm2 * sound
		zeroclamp
	}
	{if ( parm4 == 1 )
		forceHighQuality
		map		lights/defaultpointlight
		red 	( mflicker2 [time * 1]) * Parm0 * sound
		green 	( mflicker2 [time * 1]) * Parm1 * sound
		blue	( mflicker2 [time * 1]) * Parm2 * sound
		zeroclamp
	}
}

//SAVE -mflynn
lights/defaultpoint_breakable
{
	{if ( parm7 == 0 )
		forceHighQuality
		map		lights/defaultpointlight
		red 	(Parm0 * 0.8) + (sound * 0.2)
		green 	(Parm1 * 0.8) + (sound * 0.2)
		blue	(Parm2 * 0.8) + (sound * 0.2)
		zeroclamp
	}
	{if ( parm7 != 0 )
		forceHighQuality
		map		lights/defaultpointlight
		red 	(Parm0 * sound * 0.8) + 0.2
		green 	(Parm1 * sound * 0.8) + 0.2
		blue	(Parm2 * sound * 0.8) + 0.2
		zeroclamp
	}
}

//SAVE -mflynn
lights/defaultpoint_square_breakable
{
	{if ( parm7 == 0 )
		forceHighQuality
		map		lights/squarelight1
		red 	(Parm0 * 0.8) + (sound * 0.2)
		green 	(Parm1 * 0.8) + (sound * 0.2)
		blue	(Parm2 * 0.8) + (sound * 0.2)
		zeroclamp
	}
	{if ( parm7 != 0 )
		forceHighQuality
		map		lights/squarelight1
		red 	(Parm0 * sound * 0.8) + 0.2
		green 	(Parm1 * sound * 0.8) + 0.2
		blue	(Parm2 * sound * 0.8) + 0.2
		zeroclamp
	}
}

//SAVE -mflynn
lights/light_circuit3Cjitter_break
{
	{if ( parm7 == 0 )
		blend		add
		forceHighQuality
		map			lights/light_circuit3
		red 		(Parm0 * 2.4) + (sound * 0.6)
		green 		(Parm1 * 2.4) + (sound * 0.6)
		blue		(Parm2 * 2.4) + (sound * 0.6)
		zeroClamp
	}
	{if ( parm7 == 0 )
		blend		add
		forceHighQuality
		map			lights/light_circuit6
		red 		((Parm0 * 2.4) + (sound * 0.6)) * ( upanddown2[ time * 0.4 ])
		green 		((Parm1 * 2.4) + (sound * 0.6)) * ( upanddown2[ time * 0.4 ])
		blue		((Parm2 * 2.4) + (sound * 0.6)) * ( upanddown2[ time * 0.4 ])
		zeroClamp
	}
	{if ( parm7 != 0 )
		blend		add
		forceHighQuality
		map			lights/light_circuit3
		red 		(Parm0 * sound * 1.6) + 0.4
		green 		(Parm1 * sound * 1.6) + 0.4
		blue		(Parm2 * sound * 1.6) + 0.4
		zeroClamp
	}
	{if ( parm7 != 0 )
		blend		add
		forceHighQuality
		map			lights/light_circuit6
		red			((Parm0 * sound * 1.6) + 0.4) * ( upanddown2[ time * 0.4 ])
		blue		((Parm1 * sound * 1.6) + 0.4) * ( upanddown2[ time * 0.4 ])
		green		((Parm0 * sound * 1.6) + 0.4) * ( upanddown2[ time * 0.4 ])
		zeroClamp
	}
}




lights/tech_rect1
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/tech_rect1
		colored
		zeroClamp
	}
}

lights/tech_rect1_soundb
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{if ( parm6 == 0 )
		forceHighQuality
		map	lights/tech_rect1
		red parm0 * ( 1 + ( sound * 0.1 ) )
		green parm1 * ( 1 + ( sound * 0.1 ) )
		blue parm2 * ( 1 + ( sound * 0.1 ) )
		zeroClamp
	}
}


lights/tech_rect1_sound
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{if ( parm6 == 0 )
		forceHighQuality
		map	lights/tech_rect1
		color	parm0 * sound,
				parm1 * sound,
				parm2 * sound,
				1.0
		zeroClamp
	}
	{if ( parm6 != 0 )
		forceHighQuality
		map	lights/tech_rect1
		color	parm0 * parm6,
				parm1 * parm6,
				parm2 * parm6,
				1.0
		zeroClamp
	}
}

lights/tech_rect2
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/tech_rect2
		colored
		zeroClamp
	}
}

lights/tech_rect2_sound
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{if ( parm6 == 0 )
		forceHighQuality
		map	lights/tech_rect2
		color	parm0 * sound,
				parm1 * sound,
				parm2 * sound,
				1.0
		zeroClamp
	}
	{if ( parm6 != 0 )
		forceHighQuality
		map	lights/tech_rect2
		color	parm0 * parm6,
				parm1 * parm6,
				parm2 * parm6,
				1.0
		zeroClamp
	}

}

lights/tech_round1
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/tech_round1
		colored
		zeroClamp
	}
}

lights/tech_round1_sound
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{if ( parm6 == 0 )
		forceHighQuality
		map	lights/tech_round1
		color	parm0 * sound,
				parm1 * sound,
				parm2 * sound,
				1.0
		zeroClamp
	}
	{if ( parm6 != 0 )
		forceHighQuality
		map	lights/tech_round1
		color	parm0 * parm6,
				parm1 * parm6,
				parm2 * parm6,
				1.0
		zeroClamp
	}
}

lights/tech_round2
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/tech_round2
		colored
		zeroClamp
	}
}

lights/tech_round2_flicker
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/tech_round2
		color	parm0 * ( powersurge3[ time ] + 0.5 ),
				parm1 * ( powersurge3[ time ] + 0.5 ),
				parm2 * ( powersurge3[ time ] + 0.5 ),
				1.0
		zeroClamp
	}
}

lights/tech_round2_sound
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/tech_round2
		color		parm0 * sound,
				parm1 * sound,
				parm2 * sound,
				1.0
		zeroClamp
	}
}

lights/tech_round3
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/tech_round3
		colored
		zeroClamp
	}
}

lights/tech_round3_sound
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/tech_round3
		color		parm0 * sound,
				parm1 * sound,
				parm2 * sound,
				1.0
		zeroClamp
	}
}

lights/tech_round3_sharp
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/tech_round3_sharp
		colored
		zeroClamp
	}
}

lights/tech_round3_sharp_sound
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/tech_round1
		color		parm0 * sound,
				parm1 * sound,
				parm2 * sound,
				1.0
		zeroClamp
	}
}

lights/gravity_switch
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/tech_round2
		color		parm0 + ((bus1 [time * 1]) * 0.5),
				parm1 + ((bus1 [time * 1]) * 0.5),
				parm2 + ((bus1 [time * 1]) * 0.5),
				1
		zeroClamp
	}
}


lights/chainlink1_light
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/chainlink1_light
		colored
		zeroClamp
	}
}

lights/sound/roadhouse_flourescent1 //biopulse2
{
	{ if ( parm7 == 0 )
		forceHighQuality
		map			lights/squarelight3
		red			( parm0 * 0.6 ) + ( parm0 * 0.4 * sound )
		green		( parm1 * 0.6 ) + ( parm1 * 0.4 * sound )
		blue		( parm2 * 0.6 ) + ( parm2 * 0.4 * sound )
		zeroClamp
	}
	{ if ( parm7 == 1 )
		forceHighQuality
		map			lights/squarelight3
		red			( parm0 * 0.75 ) + ( parm0 * 0.25 * sound )
		green		( parm1 * 0.75 ) + ( parm1 * 0.25 * sound )
		blue		( parm2 * 0.75 ) + ( parm2 * 0.25 * sound )
		zeroClamp
	}
}

lights/sound/roadhouse_flourescent2 //soundSquareLightParm3_2
{
	{ if ( parm7 == 0 )
		forceHighQuality
		map			lights/squarelight1
		red			( parm0 * 0.6 ) + ( parm0 * 0.4 * sound )
		green		( parm1 * 0.6 ) + ( parm1 * 0.4 * sound )
		blue		( parm2 * 0.6 ) + ( parm2 * 0.4 * sound )
		zeroClamp
	}
	{ if ( parm7 == 1 )
		forceHighQuality
		map			lights/squarelight1
		red			( parm0 * 0.75 ) + ( parm0 * 0.25 * sound )
		green		( parm1 * 0.75 ) + ( parm1 * 0.25 * sound )
		blue		( parm2 * 0.75 ) + ( parm2 * 0.25 * sound )
		zeroClamp
	}
}

lights/sound/roadhouse_flourescent3 //defaultPointLight
{
	lightFalloffImage	makeintensity( lights/squarelight1a )

	{ if ( parm7 == 0 )
		forceHighQuality
		map 		lights/squarelight1
		red			( parm0 * 0.6 ) + ( parm0 * 0.4 * sound )
		green		( parm1 * 0.6 ) + ( parm1 * 0.4 * sound )
		blue		( parm2 * 0.6 ) + ( parm2 * 0.4 * sound )
		zeroClamp
	}
	{ if ( parm7 == 1 )
		forceHighQuality
		map 		lights/squarelight1
		red			( parm0 * 0.75 ) + ( parm0 * 0.25 * sound )
		green		( parm1 * 0.75 ) + ( parm1 * 0.25 * sound )
		blue		( parm2 * 0.75 ) + ( parm2 * 0.25 * sound )
		zeroClamp
	}
}

// Why is this here?
// gb 10/2/2004 1:20AM

//why are you here?
//cm 9/6/2005

//why am I here?
//mf 12/2/2005

// Replacement for 'textures/sfx/existential_quandary'
// gb 12/3/2005 5:21PM

textures/sfx/roadhouse_flare
{
	qer_editorimage		textures/editor/flare
	discrete
	noshadows
	translucent
	nonsolid
	deform flare 		( 16 + parm4 )
	{ if ( parm7 == 0 )
		blend		add
		forceHighQuality
		map			_quadratic
		red			( parm0 * 0.6 ) + ( parm0 * 0.4 * sound )
		green		( parm1 * 0.6 ) + ( parm1 * 0.4 * sound )
		blue		( parm2 * 0.6 ) + ( parm2 * 0.4 * sound )
	}
	{ if ( parm7 == 1 )
		blend		add
		forceHighQuality
		map			_quadratic
		red			( parm0 * 0.75 ) + ( parm0 * 0.25 * sound )
		green		( parm1 * 0.75 ) + ( parm1 * 0.25 * sound )
		blue		( parm2 * 0.75 ) + ( parm2 * 0.25 * sound )
	}
}

lights/hexgrid
{
	{
		forceHighQuality
		map lights/hexgrid
		colored
		zeroclamp
	}
}

lights/elight2
{
	{
		forceHighQuality
		map lights/elight2
		colored
		zeroClamp
		rotate parm4 * time
	}
}

lights/lota_torch
{
	lightFalloffImage	makeintensity( lights/squarelight1a )	// this will also be the falloff for any
	{
		forceHighQuality
		map lights/light_orglight1b
		color		parm0 * (torch[parm5 + time * 0.1]),
				parm1 * (torch[parm5 + time * 0.1]),
				parm2 * (torch[parm5 + time * 0.1]),
				1.0
		zeroClamp
	}
}

lights/hivelight1
{
	lightfalloffimage	makeintensity( lights/hivelightfalloff)
	{
		forceHighQuality
		map	lights/tech_round1
		colored
		zeroClamp
	}
}

lights/jenlight1
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/jenlight
		colored
		zeroClamp
	}
}


lights/cavelight1
{
	lightfalloffimage	makeintensity( lights/hivelightfalloff)
	{
		scale 1, -1
		forceHighQuality
		map	lights/cavelight1
		colored
		//zeroClamp
	}
}

lights/feeding_goo
{
	lightFalloffImage	makeintensity( lights/squarelight1a )


	{
		map			textures/vpaint/feeding_goo_alplight
		maskcolor
		zeroclamp
	}

	{
		map textures/vpaint/feeding_goo_fx5
//		scroll	 time * 0.02 , time * .04
		rotate	time * 0.02
		color 4 * parm0, 4 * parm1, 4 * parm2, 1.0

		zeroclamp
	}
	{
		map textures/vpaint/feeding_goo_fx6
//		scroll	 time * -.01 , time * 0.02
		rotate	time * -0.01
		color 4 * parm0, 4 * parm1, 4 * parm2, 1.0

		zeroclamp
	}
	{
		map textures/vpaint/feeding_goo_fx6
//		scroll	 time * .01 , time *0.02
		color 2 * parm0, 2 * parm1, 2 * parm2, 1.0

		zeroclamp
	}

}

lights/light_explode
{
	{
		forceHighQuality
		map			lights/light_explode
		color			parm0 *( tim1[ time * 0.1 ])*2,
					parm1 *( tim1[ time * 0.1 ])*2,
					parm2 *( tim1[ time * 0.1 ])*2,
					1.0
		rotate	time / 20
		//centerscale ( pulsebeat [time / 5]) , ( pulsebeat [time / 5])
		Clamp
	}
	{
		forceHighQuality
		map			lights/light_explode
		color			parm0 *( tim1[ time * 0.1 ])*2,
					parm1 *( tim1[ time * 0.1 ])*2,
					parm2 *( tim1[ time * 0.1 ])*2,
					1.0
		rotate	time / -60
		//centerscale ( pulsebeat [time / 5]) , ( pulsebeat [time / 5])
		Clamp
	}
}

// dmwallwalk2 lights

lights/dmww2/roundie1
{
	lightFalloffImage	makeintensity( lights/squarelight )
	{
		forceHighQuality
		map	lights/dmww2roundie1
		colored
		zeroClamp
	}
}