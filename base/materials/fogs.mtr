
// the calculated alpha value will be the distance that the fog texture
// extends from the viewer, unless it equals the default 1.0, in which case
// it will be set to 500

// if you replace the default internal fog projection image with your own
// texture, make sure that the alpha starts at 0 in the center, reaches
// 255 at the borders, and is generally radially symetrical.
// the color channel can be left solid white, or it can have additional
// color changes with position.

// you are free to modify the color or distance with math in the shaders

fogs/basicfog
{
	foglight			// tell the engine it is fog and not a light
	noshadows
	{
		map		_fog	// the internal fog image
		colored			// take rgba from entity shaderparms
	}
}

fogs/pulsing
{
	foglight			// tell the engine it is fog and not a light
	noshadows
	{
		map		_fog	// the internal fog image
		colored
		color alpha[time]*parm0,alpha[time]*parm1,alpha[time]*parm2,0
//		color alpha[time]*2,0,0,0
//		color alpha[time]*2,alpha[time*0.3],alpha[time*0.07],0
	}
}

table radiation { {1.0, 0.7, 1.0} }

fogs/radiationpulse
{
	foglight			// tell the engine it is fog and not a light
	noshadows
	{
		map		_fog	// the internal fog image
		colored
		color radiation[time*0.3]*parm0,radiation[time*0.3]*parm1,radiation[time*0.3]*parm2,0
	}
}

fogs/radiation
{
	foglight			// tell the engine it is fog and not a light
	noshadows
	{
		map		_fog	// the internal fog image
		colored			// take rgba from entity shaderparms
	}
}

fogs/testfog
{
	foglight			// tell the engine it is fog and not a light
	noshadows
	{
		map				_fog
		color 0.5, 0.5, 0.5, 0.0
	}
}

// blendlight allows a light projection with an arbitrary blend to be
// applied to everything inside it, allowing simple fogs that increase
// in a given direction without caring about the viewer position


fogs/pitfog
{
	blendlight
	noshadows
	lightfalloffimage		textures/sfx/pitfalloff	// white in color channel,
											// alpha ramps from 0 to 255, then stays at 255 a bit,
											// than has another 0 at the other end
	{
		blend		blend		// alpha blend on surfaces
		map			textures/sfx/alphasquare		// solid white in color, single pixel alpha border
		alphazeroclamp			// make sure it doesn't bleed over the edges
		colored					// take rgba from entity shaderparms
	}
}

fogs/glare
{
	blendlight
	noshadows
	lightfalloffimage	lights/squarelight1a
	{
		blend		add			// add on top of alpha blend on surfaces
		map		lights/circlelight4
		zeroclamp				// make sure it doesn't bleed over the edges
		colored					// take rgba from entity shaderparms
	}
}

fogs/glare_square
{
	blendlight
	noshadows
	lightfalloffimage	lights/squarelight1a
	{
		blend		add			// add on top of alpha blend on surfaces
		map		lights/squarelight3
		zeroclamp				// make sure it doesn't bleed over the edges
		colored					// take rgba from entity shaderparms
	}
}

fogs/filter
{
	blendlight
	noshadows
	lightfalloffimage	lights/squarelight1a
	{
		blend		gl_zero, gl_one_minus_src_color	// get dimmer as the textures get brighter
		map			lights/squarelight1
		zeroclamp				// make sure it doesn't bleed over the edges
		colored					// take rgba from entity shaderparms
	}
}
